#obj/clone/mailbox.c
msgs ({(/0,"Evergreen","done!","To: timFrom: EvergreenDate: Fri Jan 26 18:08:04 1996Subject: done!CC: BCC: -------I totally rewrote the editor's mechanics, and the qedit command works. Thecode is now made 100% portable ... if I read it right, it should evencompile just fine under 0.9 (boggle that, eh? ;-) The qedit command demosit. Try editing your workroom with it and see what yout think of it. Evergreenp.s. anyone doing a shell or interface? I'll volunteer ...",/),(/0,"Talen","Re: hows it going?","To: timFrom: TalenDate: Fri Jan 26 21:53:39 1996Subject: Re: hows it going?CC: BCC: -------Yes, I think I'm reasonably happy with my understanding of the way things areset out here... I'll start work on a banished daemon. Outline:The system will have to deal with two types of names: names that arebanished permanently (eg: offensive names/conflicts with the mudlib'sinternals/etc) and those that are banished for a period of time. (eg:those who have exams, or who are being punished for some transgression.)I think the best way to do it would be to have the daemon deal with the listof people, and, upon receiving an enquiry from the connection object as towhether or not a name is valid for login, to respond with either an intor a string. 0 = it's fine. String = print out that string, and don'tlet them in. (hmm...it might be wiser to let the connection object dealwith that...perhaps they should be given an opportunity to choose adifferent name?)I'm still thinking about aspects that could or couldn't be implemented...comments are welcome; don't go looking for code, I'll probably type upa basic version at home, and bring it online for testing later this week.(might take me a while...the third cricket test - Aussies vs. Sri Lanka- is on atm, and it looks like it'll be a good battle. :-) )Should have the outline done by Friday, though. HTH.",/),(/0,"Tim","EditorD","To: evergreenFrom: TimDate: Tue Jan 30 00:16:18 1996Subject: EditorDCC: BCC: tim-------Being the function pointer enthusiast that I am *evil grin* Imodified a copy of your editord to use a function pointer whenOLD_MUDOS is undefined.  My main reason for doing this is it makescalling syntax a lot simpler for us.  You can check this out in/u/t/tim/editord2.c and see what you think.  I think I preservedthe OLD_MUDOS compatibility properly; only a few changes were needed.I'm testing it with mail here, and it seems to be working, so youcan take a look at the mail daemon for the calling syntax I used.I still have to check on that old function pointer syntax...it shouldbe supported, but those problems could be the result of bugs in thisalpha version of the driver.later!Tim",/),(/0,"Evergreen","Re: EditorD","To: timFrom: EvergreenDate: Tue Jan 30 09:59:07 1996Subject: Re: EditorDCC: BCC: -------Looks like it's good to me! I'm willing to call it finished ifyou are. Evergreen (writing on the editor :-)",/),(/0,"Evergreen","b.board","To: timFrom: EvergreenDate: Wed Jan 31 10:15:30 1996Subject: b.boardCC: BCC: -------I meant to ask what was going on with the bully-boards, too. I knowExe is handling them, but he hasn't logged in for nearly a week. As for the shells, I had an idea for them. How about having something inuser.c's process_input() that calls process_string() in the shell, and itdoes the work? That way, players can choose between shells, and each shell maintains its own alias and environment structure. (This meansthough that the shells, since they have to keep globals, have to do their own save_object() to preserve their data, unless we keep theenvironment and aliases in user.c.) Upon entry into the mud, user.c callsboot() in the shell, which makes a clone of it, loads the aliases, returnsits instance to the player; thereafter, process_input() calls the shellusing that instance, and when the player quits, the user calls the shelldone(), which cleans up and destructs.  Just an idea. Evergreen",/),(/0,"Talen","Array truncation?","To: timFrom: TalenDate: Tue Feb  6 17:32:34 1996Subject: Array truncation?CC: BCC: -------Ok, 'tis probably a simple question, but I don't know how to do it onthis mud. I have an array of a certain number of elements - say 20, forthe sake of argument. The last of these - say 5 - are zeroes, and I wishto remove them from the array (ie, truncate it to 15 elements.) On themud I've worked on before, this is done with:    arr[..14] /* 0..14 = 15 elements */but the driver here barfs at that syntax. :-( The general idea is thatthe banish daemon (which is virtually complete, except for that lack)will maintain arrays of names, turning unused names into 0's, and puttingthem at the end of the array. It then, when it comes time to save the datato disk, truncates the array, so that the null elements _aren't_ saved,taking up disk space. Thanks in advance.",/),(/0,"Evergreen","Re: Bboards","To: timFrom: EvergreenDate: Fri Feb  9 16:52:55 1996Subject: Re: BboardsCC: BCC: -------Cool :-)I'm also working on a prototype shell, I'll let you know when I getthe backbone of it done so you can tell me what you think of it. Ev.",/),(/0,"Talen","Banish daemon - should be finished...","To: timFrom: TalenDate: Fri Feb  9 20:17:31 1996Subject: Banish daemon - should be finished...CC: BCC: -------however, it's not tested. It loads ok; the code _looks_ ok; but shortof writing a separate testing object (which is _not_ my idea of funover the Australian-US link...), I can't test it. If you've got anyqueries, I'm happy to help out. cheers.",/),(/0,"Kyricc","hey","To: timFrom: KyriccDate: Thu Feb 15 00:06:17 1996Subject: heyCC: BCC: -------hey goto kyricc homepage and go to the corpse.c link and look at itthen look at /u/k/kyricc/WWW/corpse.html and see what i can do to fixit if you get itme....thanks....",/),})

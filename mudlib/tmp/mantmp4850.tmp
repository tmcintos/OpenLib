all_inventory() (3)  - return the inventory of an object
all_previous_objects() (3) - returns an array of objects that called the current function
author_file (4)      - determine the author for a given object
call_other() (3)     - call a function in another object
call_out() (3)       - delayed function call in same object
children() (3)       - returns an array of objects cloned from a given object.
clean_up (4)         - periodically called in inactive objects
clone_object() (3)   - load a copy of an object
clonep() (3)         - determine whether or not a given variable points to a cloned object
command() (3)        - execute a command as if given by the object
compile_object (4)   - serves as the mudlib interface for the virtual object facility
connect (4)          - get an object for a new user
create (4)           - object initialization
creator_file (4)     - specifies the uid to give to a newly cre ated object
deep_inherit_list() (3) - get a list of ancestors of an object
deep_inventory() (3) - return the nested inventory of an object
destruct() (3)       - remove an object from the games
disable_commands() (3) - makes a living object non-living
disable_wizard() (3) - remove wizard priveleges from an object
domain_file (4)      - determine the domain for a given object
dump_prog() (3)      - dump/disassemble an LPC object
dumpallobj() (3)     - report various statistics on all objects that have been loaded
enable_commands() (3) - allow object to use 'player' commands
enable_wizard() (3)  - give wizard priveleges to an object
environment() (3)    - return the environment of an object
epilog (4)           - returns an array of the filenames of the objects to be preloaded.
error_handler (4)    - function in master object to handle errors
exec() (3)           - switches a player (interactive) connection from one object to another
export_uid() (3)     - set the uid of another object
file_name() (3)      - get the file name of an object
find_living() (3)    - find a living object matching a given id
find_object() (3)    - find an object by file name
first_inventory() (3) - return the first item in an object's inventory
function_exists() (3) - find the file containing a given func tion in an object
function_profile() (3) - get function profiling information for an object
generate_source() (3) - generates the C code corresponding to a give object
geteuid() (3)        - return the effective user id of an object or function
getuid() (3)         - return the user id (uid) of an object
id (4)               - function called by present() in order to identify an object
inherit_list() (3)   - get a list of parents of an object
inherits() (3)       - determine if an object inherits a given file
init (4)             - function in an object called by move_object() to initialize verb/actions
interactive() (3)    - detects whether or not a given object is an interactive
living() (3)         - detects whether or not a given object is "liv ing"
livings() (3)        - return an array of all living objects
load_object() (3)    - find or load an object by file name
master() (3)         - returns the master object
memory_info (3)      - obtain info on object/overall memory usage
message() (3)        - deliver messages to "living" objects
move_object() (3)    - move current object to another environment
move_or_destruct (4) - ask an object to move to the specified destination
net_dead (4)         - called by the MudOS driver when an interactive object drops its connection
new() (3)            - load a copy of an object
next_inventory() (3) - return the next object in the same inventory
object_name (4)      - called by the driver to find out an object's name
objectp() (3)        - determine whether or not a given variable is an object
objects (3)          - return an array of all loaded objects
preload (4)          - preload an object into memory.
present() (3)        - find an object by id
previous_object() (3) - returns the object(s) that called the current function
privs_file (4)       - specifies the privs string to give to a newly created object
process_input (4)    - provide a hook for the MudOS driver to send a copy of what the player is typing to the player object.
query_heart_beat() (3) - query the status of an object's heartbeat
query_ip_name() (3)  - return the ip name of a given player object.
query_ip_number() (3) - return the ip number for a player object
query_load_average() (3) - forces an error to occur in an object.
query_privs() (3)    - return the privs string for an object
query_snoop() (3)    - return the snooper of an interactive object
query_snooping() (3) - return the object than an object is snooping
receive() (3)        - displays a message to the current object
reclaim_objects (3)  - reclaim any lingering objets
reload_object (3)    - return an object to its just-loaded state
replace_program() (3) - replaces the program in this_object()
reset (4)            - allows an object to do self-maintenance
restore_object() (3) - restore values of variables from a file into an object
save_object() (3)    - save the values of variables in an object into a file
set_author (3)       - set the author associated with an object.
set_heart_beat() (3) - enable or disable an object's heartbeat
set_hide() (3)       - set the hide flag on a hidable object
set_light() (3)      - update or query an object's light level
set_living_name() (3) - set a living name for a living object
set_privs() (3)      - set the privs string for an object
set_reset (3)        - modify the time until reset on an object
seteuid() (3)        - set the effective user id (euid) of an object
shadow() (3)         - shadow one or more functions in some object
shadowp() (3)        - determine whether or not a given object it shadowing another
shout() (3)          - sends a message to all living objects
socket_release() (3) - release ownership of a socket to another object
tell_object() (3)    - send a message to an object
this_object() (3)    - return the object pointer of the calling object
throw() (3)          - forces an error to occur in an object.
traceprefix() (3)    - sets the prefix determining which objects to trace
unique_array() (3)   - partitions an array of objects into groups
userp() (3)          - determine if a given object was once interactive
users() (3)          - return an array of objects containing all inter active players
valid_asm (4)        - controls whether or not a LPC->C compiled object can use asm { }
valid_compile_to_c (4) - controls whether or not an object may be compiled via LPC->C at runtime
valid_hide (4)       - allows or disallows objects to hide and see hidden objects
valid_object (4)     - allows control over which objects can be loaded
valid_save_binary (4) - controls whether or not an object can save its program
valid_shadow (4)     - controls which objects can be shadowed
virtualp() (3)       - determine whether a given variable points to a virtual object
wizardp() (3)        - determines if a given object had enable_wizard() performed in it

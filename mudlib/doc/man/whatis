__INIT (4)           - obsolete apply
acos() (3)           - return the arccosine of a float
add_action() (3)     - bind a command verb to a local function
all_inventory() (3)  - return the inventory of an object
all_previous_objects() (3) - returns an array of objects that called the current function
allocate() (3)       - allocate an array
allocate_buffer() (3) - allocate a buffer
allocate_mapping() (3) - pre-allocate space for a mapping
apply() (3)          - evaluate a function pointer
arrayp() (3)         - determine whether or not a given variable is an array
asin() (3)           - return the arcsine of a float
atan() (3)           - return the tangent of a float
author_file (4)      - determine the author for a given object
bind() (3)           - change the owner of a function pointer
break_string() (3)   - break a string at regular intervals
bufferp() (3)        - determine whether or not a given variable is a buffer
cache_stats() (3)    - report various driver and mudlib statis tics
call_other() (3)     - call a function in another object
call_out() (3)       - delayed function call in same object
call_out_info() (3)  - get pending call_out() information
capitalize() (3)     - capitalize a string
catch() (3)          - catch an evaluation error
catch_tell (4)       - provides an interface to interact with users
ceil() (3)           - round a float up to the nearest integer
children() (3)       - returns an array of objects cloned from a given object.
clean_up (4)         - periodically called in inactive objects
clear_bit() (3)      - zero a bit in a bit string
clone_object() (3)   - load a copy of an object
clonep() (3)         - determine whether or not a given variable points to a cloned object
command() (3)        - execute a command as if given by the object
commands() (3)       - returns some information about actions the user can take
compile_object (4)   - serves as the mudlib interface for the virtual object facility
connect (4)          - get an object for a new user
cos() (3)            - return the cosine of a float
cp() (3)             - copy a file
crash (4)            - function in master that is called in the event the driver crashes
crc32() (3)          - compute the cycle redundancy code for a buffer or string
create (4)           - object initialization
creator_file (4)     - specifies the uid to give to a newly cre ated object
crypt() (3)          - encrypt a string
ctime() (3)          - return a time string
debug_info() (3)     - display debug information
debugmalloc() (3)    - dumps information on malloc'd memory to a file.
deep_inherit_list() (3) - get a list of ancestors of an object
deep_inventory() (3) - return the nested inventory of an object
destruct() (3)       - remove an object from the games
disable_commands() (3) - makes a living object non-living
disable_wizard() (3) - remove wizard priveleges from an object
domain_file (4)      - determine the domain for a given object
domain_stats() (3)   - returns statistics gathered on domainsauthor_stats() (3)   - returns statistics gathered on authors
dump_file_descriptors() (3) - dump the MudOS process file descriptor table
dump_prog() (3)      - dump/disassemble an LPC object
dump_socket_status() (3) - display the status of each LPC socket
dumpallobj() (3)     - report various statistics on all objects that have been loaded
each() (3)           - iterate over the (key, value) pairs in a mapping
ed() (3)             - edit a file
ed_cmd() (3)         - send a command to an ed session
ed_start() (3)       - start an ed session
enable_commands() (3) - allow object to use 'player' commands
enable_wizard() (3)  - give wizard priveleges to an object
environment() (3)    - return the environment of an object
epilog (4)           - returns an array of the filenames of the objects to be preloaded.
error (3)            - generate a run-time error
error_handler (4)    - function in master object to handle errors
errorp() (3)         - determine whether or not a given variable is an error code
eval_cost() (3)      - returns the evaluation cost remaining
evaluate() (3)       - evaluate a function pointer
exec() (3)           - switches a player (interactive) connection from one object to another
exp() (3)            - find e to the power of a float
explode() (3)        - break up a string
export_uid() (3)     - set the uid of another object
file_name() (3)      - get the file name of an object
file_size() (3)      - get the size of a file
filter_array() (3)   - return a selective sub-array
filter_mapping() (3) - remove some elements of a mapping based on a function
find_call_out() (3)  - find a call out scheduled to be called next
find_living() (3)    - find a living object matching a given id
find_object() (3)    - find an object by file name
find_player() (3)    - find a player by name
first_inventory() (3) - return the first item in an object's inventory
flag (4)             - handle mudlib specific flags specified at driver startup
floatp() (3)         - determine whether or not a given variable is a float
floor() (3)          - round a float down to the nearest integer
function_exists() (3) - find the file containing a given func tion in an object
function_profile() (3) - get function profiling information for an object
functionp() (3)      - determine whether or not a given variable is a function pointer, and if so what kind
generate_source() (3) - generates the C code corresponding to a give object
get_bb_uid (4)       - get the backbone uid
get_char (3)         - causes next character of input to be sent to a specified function
get_config() (3)     - query various driver config settings
get_dir() (3)        - returns information pertaining to a filesystem directory
get_root_uid (4)     - get the root uid
get_save_file_name (4) - back up editor file on abnormal exit
geteuid() (3)        - return the effective user id of an object or function
getuid() (3)         - return the user id (uid) of an object
id (4)               - function called by present() in order to identify an object
implode() (3)        - concatenate strings
in_edit() (3)        - determine if a player is in the editor
in_input() (3)       - determines if a player is inputting to an input_to
inherit_list() (3)   - get a list of parents of an object
inherits() (3)       - determine if an object inherits a given file
init (4)             - function in an object called by move_object() to initialize verb/actions
input_to() (3)       - causes next line of input to be sent to a specified function
int notify_fail( string | function str ); 
interactive() (3)    - detects whether or not a given object is an interactive
intp() (3)           - determine whether or not a given variable is an integer
keys() (3)           - return an array of the keys from the (key, value) pairs in a mapping
link() (3)           - link a file to another
living() (3)         - detects whether or not a given object is "liv ing"
livings() (3)        - return an array of all living objects
load_object() (3)    - find or load an object by file name
localtime() (3)      - convert to local time
log() (3)            - returns the natural logarithm of a float
log_error (4)        - log errors intelligently
logon (4)            - initialize a login connection
lower_case() (3)     - return the lowercase version of a given string
make_path_absolute (4) - resolve relative path name
malloc_status() (3)  - report various statistics related to memory usage.
map() (3)            - modify an mapping, array, or string via applica tion of a function
map_array() (3)      - modify an array of elements via application of a function
map_delete() (3)     - remove a (key, value) pair from a mapping based on the key
map_mapping() (3)    - modify an mapping of elements via applica tion of a function
mapp() (3)           - determine whether or not a given variable is a mapping
master() (3)         - returns the master object
match_path() (3)     - search a mapping for a path
max_eval_cost() (3)  - returns the maximum evaluation cost
member_array() (3)   - returns index of an occurence of a given item in an array or string
memory_info (3)      - obtain info on object/overall memory usage
message() (3)        - deliver messages to "living" objects
mkdir() (3)          - make a directory
moncontrol() (3)     - turns on/off profiling during execution
move_object() (3)    - move current object to another environment
move_or_destruct (4) - ask an object to move to the specified destination
mud_status() (3)     - report various driver and mudlib statistics
net_dead (4)         - called by the MudOS driver when an interactive object drops its connection
new() (3)            - load a copy of an object
next_inventory() (3) - return the next object in the same inventory
nullp() (3)          - determine whether or not a given variable is null.
object_name (4)      - called by the driver to find out an object's name
objectp() (3)        - determine whether or not a given variable is an object
objects (3)          - return an array of all loaded objects
opcprof() (3)        - reports statistics on calling frequencies of various efuns
origin() (3)         - determine how the current function was called
parse_command() (3)  - try to match a string with a given pat tern
pointerp() (3)       - determine whether or not a given variable is an array
pow() (3)            - find an exponent of a float
preload (4)          - preload an object into memory.
present() (3)        - find an object by id
previous_object() (3) - returns the object(s) that called the current function
printf, sprintf (3)  - formatted output conversion
privs_file (4)       - specifies the privs string to give to a newly created object
process_input (4)    - provide a hook for the MudOS driver to send a copy of what the player is typing to the player object.
process_string() (3) - give a string with replaced callde scriptions
process_value() (3)  - give a value from a described function call
query_ed_mode() (3)  - find out the status of the current ed session
query_heart_beat() (3) - query the status of an object's heartbeat
query_host_name() (3) - return the host name
query_idle() (3)     - determine how many seconds an interactive player has been idle
query_ip_name() (3)  - return the ip name of a given player object.
query_ip_number() (3) - return the ip number for a player object
query_load_average() (3) - forces an error to occur in an object.
query_privs() (3)    - return the privs string for an object
query_snoop() (3)    - return the snooper of an interactive object
query_snooping() (3) - return the object than an object is snooping
query_verb() (3)     - return the name of the command currently being executed
random() (3)         - return a pseudo-random number
read_buffer() (3)    - read from a file and return a buffer, or return part of a buffer as a string
read_bytes() (3)     - reads a contiguous series of bytes from a file into a string
read_file() (3)      - read a file into a string
receive() (3)        - displays a message to the current object
receive_message (4)  - provides the interface used by the mes sage efun.
receive_snoop (4)    - catch incoming snoop text
reclaim_objects (3)  - reclaim any lingering objets
refs (3)             - return the number of references to a data structure
reg_assoc() (3)      - A regular pattern substring extractor
regexp() (3)         - regular expression handler
reload_object (3)    - return an object to its just-loaded state
remove_action (3)    - unbind a command verb from a local func tion
remove_call_out() (3) - remove a pending call_out
rename() (3)         - rename a file
replace_program() (3) - replaces the program in this_object()
replace_string() (3) - replace all instances of a string within a string
reset (4)            - allows an object to do self-maintenance
reset_eval_cost() (3) - resets the evaluation cost remaining
resolve() (3)        - resolve an internet address to domain name, or vice versa
restore_object() (3) - restore values of variables from a file into an object
restore_variable() (3) - restore value of a variable from a string
retrieve_ed_setup (4) - retrieve a user's editor setup or con figuration settings
rm() (3)             - remove a file
rmdir() (3)          - remove a directory
rusage() (3)         - reports information gathered by the getrusage() system call
save_ed_setup (4)    - save a user's editor setup or configura tion settings
save_object() (3)    - save the values of variables in an object into a file
save_variable() (3)  - save the value of variable into a string
say() (3)            - send a message to all users in the same environ ment
set_author (3)       - set the author associated with an object.
set_bit() (3)        - set a bit in a bitstring
set_debug_level() (3) - sets the debug level used by the driver's debug() macro
set_eval_limit() (3) - set the maximum evaluation cost
set_heart_beat() (3) - enable or disable an object's heartbeat
set_hide() (3)       - set the hide flag on a hidable object
set_light() (3)      - update or query an object's light level
set_living_name() (3) - set a living name for a living object
set_malloc_mask() (3) - sets the mask controlling display of malloc debug info
set_privs() (3)      - set the privs string for an object
set_reset (3)        - modify the time until reset on an object
seteuid() (3)        - set the effective user id (euid) of an object
shadow() (3)         - shadow one or more functions in some object
shadowp() (3)        - determine whether or not a given object it shadowing another
shout() (3)          - sends a message to all living objects
shutdown() (3)       - shutdown the driver
sin() (3)            - return the sine of a float
sizeof() (3)         - return the number of elements in an array, map ping, buffer or string
slow_shutdown (4)    - informs the mud that a slow shutdown is in progress
snoop() (3)          - snoop an interactive user
socket_accept() (3)  - accept a connection on a socket
socket_acquire() (3) - assume ownership of a socket
socket_address() (3) - return the remote address for an efun socket
socket_bind() (3)    - bind a name to a socket
socket_close() (3)   - close a socket
socket_connect() (3) - initiate a connection on a socket
socket_create() (3)  - create an efun socket
socket_error() (3)   - return a text description of a socket error
socket_listen() (3)  - listen for connections on a socket
socket_release() (3) - release ownership of a socket to another object
socket_write() (3)   - send a message from a socket
sort_array() (3)     - sort an array
sqrt() (3)           - returns the square root of a float
sscanf() (3)         - match substrings in a string.
stat() (3)           - returns information pertaining to a file or a directory
strcmp() (3)         - determines the lexical relationship between two strings.
stringp() (3)        - determine whether or not a given variable is a string
strlen() (3)         - returns the length of a string
strsrch() (3)        - search for substrings in a string
swap (3)             - swap out a file explicitly
tail() (3)           - displays the latter portion of a file
tan() (3)            - return the tangent of a float
tell_object() (3)    - send a message to an object
telnet_suboption (4) - process telnet suboptions
terminal_type (4)    - inform the mudlib of the user's terminal type
this_object() (3)    - return the object pointer of the calling object
throw() (3)          - forces an error to occur in an object.
time() (3)           - return the number of seconds since January 1, 1970
time_expression() (3) - return the amount of real time that an expression took
to_float (3)         - convert an int to a float
to_int (3)           - convert a float or buffer to an int
trace() (3)          - sets trace flags and returns the old ones.
traceprefix() (3)    - sets the prefix determining which objects to trace
typeof() (3)         - return the type of an expression
undefinedp() (3)     - determine whether or not a given variable is undefined.
unique_array() (3)   - partitions an array of objects into groups
unique_mapping() (3) - create a mapping from an array based on a function
uptime() (3)         - return the number of seconds elapsed since the last driver reboot
userp() (3)          - determine if a given object was once interactive
users() (3)          - return an array of objects containing all inter active players
valid_asm (4)        - controls whether or not a LPC->C compiled object can use asm { }
valid_bind (4)       - controls the use of the bind() efun
valid_compile_to_c (4) - controls whether or not an object may be compiled via LPC->C at runtime
valid_hide (4)       - allows or disallows objects to hide and see hidden objects
valid_link (4)       - controls the use of link(3)
valid_object (4)     - allows control over which objects can be loaded
valid_override (4)   - controls the use of efun::
valid_read (4)       - checks if a certain person has read permis sion on a file
valid_save_binary (4) - controls whether or not an object can save its program
valid_seteuid (4)    - secures the use of seteuid(3)
valid_shadow (4)     - controls which objects can be shadowed
valid_socket (4)     - protects the socket efunctions.
valid_write (4)      - checks if a certain person has write permis sion on a file
values() (3)         - return an array of the values from the (key, value) pairs   in a mapping
view_errors (4)      - checks if a user should see error messages
virtualp() (3)       - determine whether a given variable points to a virtual object
wizardp() (3)        - determines if a given object had enable_wizard() performed in it
write() (3)          - send a message to current player
write_buffer() (3)   - write a buffer to a file, or read into a buffer from a source
write_bytes() (3)    - writes a contiguous series of bytes to a file
write_file() (3)     - appends a string to a file
write_prompt (4)     - called when the parser wants a prompt to be written.

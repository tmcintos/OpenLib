rev. 1/20/96
Mudlib Security System
----------------------
(Using uid's, effective uid's and group id's)

  In this system permissions are granted to an object based on that object's
group memberships.  An object's group memberships are obtained from the the
file /adm/etc/group, using the object's effective user ID (euid), which is in
turn obtained from the object's user ID (uid) in most cases.  The uid of an
object is determined by the directory from which the object was created,
except in the case of players (interactive objects).  This system could also
be set up to allow extra permissions to a user based on euid.

  The general guidelines for the system are as follows:

1.  Uid's will only be set by the driver and login/su system.
    (This is the only way to change a uid, and the target object's euid must
    be 0 or export_uid() will fail.)
2.  Only objects created from /adm can have a uid of 'Root'.
3.  All users will have their uid exported to them by the login/su system.
4.  Objects created from a player's home directory or a domain's directory
    will have the uid of that player or domain.
5.  All other non-interactive objects will have a uid 'System'.
6.  Only members of groop 'root' (In this case, the object's group membership
    is based on it's actual uid, not euid) can use seteuid() to change their
    euid to anything other than 0 or their uid.
7.  Group membership will be determined by checking an object's euid against
    the group member lists in /adm/etc/group.
8.  Permission to perform an operation will be based on the merits
    (read: group membership and effective uid) of the object performing the
    operation, NOT on the merits of the objects in the call chain that
    caused this object to act.  Thus, any object which may perform an
    operation that could compromise mudlib security must set it's
    effective uid to that of the object that called it.  (This requirement
    makes it necessary for these types of objects to be members of group
    'root' i.e. reside under the /adm directory tree.)
---

Proposed Read/Write Access:

Dir.		Read	Write
-----------------------------------------
/adm		admin	root
/d		all	root
(domain dirs can be read/written by domain members--group for each domain)
/cmd		all	mudlib
/data		all	system,mudlib
/doc		all	mudlib
/include	all	mudlib
/obj		all	mudlib
/u		admin	root
(home dir can only be read and written by the individual)
/tmp		all	all
/pub		all	all

(Individual permissions could be given to directories by adding an ACCESS
file in that directory with the euid's of the people who should be able to
read or write to that directory.)

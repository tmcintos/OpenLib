The combat system is operated from a daemon. This structure gives
us a couple of advantages over having the code in the living (player/monster)
body.  The first and perhaps foremost from the view of a mudlib coder is that
reboots are not needed for a minor change to the combat system (cheer).  From
the administartors view, this SHOULD be somewhat faster (yeah, right) because
nearly all information islocal and does not need to be called up from
forien objects.  It also allows us to enforce more structure to the information.
A brief listing of the functions in the daemon and what they do follows.
Create()
Nothing much.  Don't call this unless you happening to be loading the file
as well. =P
clear_all_combat_info()
Clears all the combat information.  non-formaly ceases all combat in progress.
query_dmg_message()
Kept seperate for readability and some modularity.  Just returns a message
that describes the ammount of damage provided.
clean_up_all_attackers()
Housekeeping function called by continue_all_attacks().  May be later
removed and installed directly into continue_all_attacks.  If two attackers
are not next to each other, the stop fighting each other.
continue_all_attacks()
This is the small lump of code that tells everybody to attack everybody else.
execute_attack(obj victim, attacker, mixed *weapon_info, hit_mod, dmg_mod)
This is the nasy code that auctualy executes the attack.
Call this to have person a swing at person b.  weapon info (so far) is
partitioned as follows:
weapon_info[0]: int damage bonus
1: int damage range(0 to ??-1) use this to damage format to cut a few cpu ticks
2: int to_hit bonus
3: string *weapon_messages
4: string *hit_verbs (eg. slice, chop)
5: string *hit_verbs2 (eg. slices, chops)
6: string *miss_verbs (eg.slice above, swing wildly at, whatever)
7: string *miss_verbs2 (eg. slices above, swings wildly at, etc)
8: weapon_names (eg. longsword, spear, pike, etc...)
9:  bitmap (int) weapon_type(explaned elsewhere(?))
10: object weapon_object (whatever is being used to execute the attack.)
11: Non-crucial (just wield info) bitmap hands wielded with
execute_bow_attack(object victim, attacker, mixed weapon_info)
Executes an attack with a bow if it is ready, else increments its readyness.
init_combat(forget it, do't call.  ok?)
I won't explain this cause you AIN'T SUPPOSED TO CALL IT!
kill_ob(object attacker, victim)
Starts the two fighting each other.  Returns 0 on success, !0 on failuer.
(namely if it's an object, not present, attacking yourself, etc...)

That concludes that part.  Mail me(casper) at(epeters@netcom.com) if you need
any more functions added.  namely all the good queries.  Don't forget:
I won't add it if you don't ask.


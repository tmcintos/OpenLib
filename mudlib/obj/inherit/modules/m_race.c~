/*  -*- LPC -*-  */
// m_race.c:  race specific code
//
// Functions pretaining to the race 'clay'.
// Malieable race, for all forms of animals and creatures
// Orig by casper 11/95

#include <weapon.h>
 
int query_stat(string);
int query_skill(string);

private static string race_name;
private static int base_weight;
private static int hands;
private static string *armour_types, *armour_locations;
private static int *base_ac;
private static function combat_info;
private static int base_str, base_agil;

int str, agil;       // stats so far
mapping skills;      // easy way out

void init_race(mixed* raceinfo)
{
  race_name = raceinfo[0];
  hands = raceinfo[1];
  base_weight = raceinfo[2];
  base_str = raceinfo[3];
  base_agil = raceinfo[4];
  armour_types = raceinfo[5];
  armour_locations = raceinfo[6];
  base_ac = raceinfo[7],
  combat_info = bind(raceinfo[8], this_object());
}

int
query_stat(string stat)
{
  switch( stat )
  {
  case "strength":
    return base_str + str;
  case "agility":
    return base_agil + agil;
  default:
    return 0;
  }
}

int
query_skill(string skill)
{
  // put guts in here too :) 5-18 for users 5-25 monsters
  return 11;
}

string query_race()
{
  return race_name;
}

string *query_armour_types()  //The 'ID' of armours that can be worn.
{
  return copy(armour_types);
}
 
string *query_armour_locations()  //Where the armours are worn
                                  //Parralel to above array
{
  return copy(armour_locations);
}
 
int *query_base_ac()
{
  return copy(base_ac);
}
 
int query_hands()  //The number of hands and therefore(?)
{                  //total number of weapons the race can wield
  return hands;
}
 
varargs mixed *query_unarmed(int hand_pair,string wep_skill)
{
  int str = query_stat("strength"),
      agl = query_stat("agility"),
      cbt = query_skill("combat"),
      unr = query_skill("unarmed"),
      ws = query_skill(wep_skill);
 
  return evaluate(combat_info, hand_pair, wep_skill, str, agl, cbt, unr, ws);
}

#if 0    
    // **DO NOT CHANGE THIS WITHOUT INFORMING ME, CASPER**
    return ({ 2916473 /
		(3 * (26 - str) + (26 - agl) + 2 *
		 (1001 - (wep_skill ? ws  : 0)) + 
		 (1001 - (wep_skill ? cbt : 0))) - 949,
	      // That was the damage bonus.  Worked to balance (somewhat) 
	      // skills and the like.  Ask for an explination of why it 
	      // is the way it is.  Casper
	      (wep_skill && wep_skill == "unarmed" ? 5 + unr / 10 : 0),
	      // damage range needed ONLY for unarmed combat.
	      // May need balancing.
	      7 * str + 21 * agl + (wep_skill ? 2 * cbt + ws : 0) + 136,
	      // base to_hit
	      // Again, ask for an explination of why it is the way it 
	      // is.  Casper
	      (wep_skill 
	      (wep_skill && wep_skill == "unarmed" ? 0 :
	       str * 10 + 
	       agl * 20 + 
	       cbt * 10) +
		 (wep_skill != "unarmed" && wep_skill ? ws * 10 : 0),
	      //parry modifier.  Nill for unarmed combat (how DO you
	      //parry with hands?) otherwize 2% per point of agil & 1%
	      //per point of str + 1% per combat * weapon skill.
	      ({"punch","sock","chop","jab"}),
	      ({"punches","socks","chops","jabs"}),
	      ({"miss","swing above", "jab beside", "swing short of"}),
	      ({"misses","swings above", "jabs beside", "swings short of"}),
	      ({"fists","balled hand", "hand", "fist"}),
	      WEAPON_FISTS,
	      this_object(),
	      0
	      });
#endif

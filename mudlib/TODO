<PRE>
(last thorough update: 10/15/96)

-mudlib security (Tim) (alpha testing)
-bulletin boards (Evergreen) [this has been merged into a more general news
 system to which bulletin boards will be the player interface] (Tim -- I guess)
-put command (Kyricc) (is this finished?)
-Banished names.  Implement this probably as a daemon that maintains an array
	of names.  Could be incorporated into logind?  Would require a
	savefile. (Talen) (alpha testing)
-user bodies, shells, shell interfaces: (Evergreen, Tim) (alpha testing)
	-redesign the way connection, body and shell are related.  All
		administrative stuff should be in the connection, while all
		game-play stuff in the body, and shell should affect look-
		and-feel (no?)
	-environment variables (I think these should be in player and have
		get_env() type funcs.)
	-alias, var, wildcard and any other expansions done in shells
	-revamp the way race and combat functions are included in the bodies
	-prompt changing in shells
	-make inheritable with wildcard expansion func in it (move out of user)

-linkdeadedness: save messages from when you were linkdead in a buffer.
  Give option for viewing on reconnect.  (possibly only certain classes of
  messages or configurable). (Partially done)

-ucache: finish this daemon and related code (Tim -- done I think)
-news system (Tim) (alpha testing) (see also - bulletin boards)
-bug,idea commands log to /log/BUGS /log/IDEAS
	also log to wizards' home dirs if files belong to them
	Could these commands take an object as a possible argument for
	reference?
-emote/feelings daemon/commands (rewrite) (Kyricc??)
-hit/spell points, damage funcs. in living.c
-living funcs: query_drunk()
-races (work on them) (centralize into some sort of daemon? languages??)
	-max weight funcs for races?
-monsters etc:
	-set_aggressive() in monsters plus related code
	-any other needed stuff in monster.c
-dest command: options for file argument, and dest all instances...
-help command/system uses help() and help_desc() in the command obj.
	help on commands get from object, topics from /doc/help/{player,wiz..}
	Search by keyword with -k flag (uses help_desc() to search commands)
	(partially implemented--rewrite?)
-leveling system
-guild system
-parties (prolly after more of the basics are in place)
-double check all weight related funcs and money related funcs. Update docs.
-(un)subscribe command:  make these take a list of channels
-WWW gateway for MUD Mail
-command to add local->remote mappings via set_alias() in chatd (outdated?)
 function itself needs to do checks for validity too.
-implement error packets in inetd and rest of OOB services (Pending completion
 of I3 spec. (found on CIE homepage))
-intermud.c: fix to use shutdown packet when shutting down (done?)
-finish mudlib programming style guide
-object.c needs work... (outdated..I think)
-room.c: make long() always ret a string array too... will have to change
 this standard for all objects. (also outdated)
-shutdown() -- efun for this that checks root permissions etc...
-change semantics of looking at objects to call long() with 'look at' and to
 call interior() (or something) with 'look in' (not sure about this)
-ls.c: add an flag to sort files by modification date
-list idle time as hh:mm:ss or dd:hh:mm:ss in the general finger report.(???)
-login_d: change it so any member of domain admin gets priv 1 (outdated??)
-fix errors in net daemons caused by my change to server.c (outdated??)
-fix security hole created by programs like changelog which use a callback
 from a daemon with priv 1 access. (not really a bug)
 Probably just means being careful when writing such commands...maybe more.
-problem with CMD_D?  When path is garbage we get problems with security_d
 and too long eval...problem is prolly in get_file_protection
-syslog: system logging facility, msg priorities etc. (sane??)
-get command:  fix so you can't steal stuff from people-not now at least
-trans/summon:  create some commands to bring people/things to your environmt.
-ROOM: unresolved issues with adding exits, etc.  Need to figure out a way
 to add_action() to each player that is already in the room.  This problem
 may go away if we go to using xverbs..don't know.
-mkwiz:  add code to create directory, copy workroom, set protections, etc.
-ln:  make this command for creating hard links
-player saving: quick hack is in place but need better solution
-reply command for replying to the last person who used 'tell' to send
 you a message (handy for I3 and long names)
-higher priv objects inheriting lower priv objects is a security hole...this
 should be checked in the lib and things should get reorganized...notably
 user.c
-Change mudlib to use MudOS command parser, verb handlers, etc. (started)
</PRE>

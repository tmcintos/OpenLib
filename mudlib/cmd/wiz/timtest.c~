/*  -*- LPC -*-  */

// basically a watered down version of get_words that makes sure everything
// will be ok
int
check_syntax(string line)
{
  int parens, double_quotes, left_quote, right_quote;
  int escaped;

  for(int i = 0; i < sizeof(line); i++) {
    if(escaped) {
      escaped = 0;
      continue;
    } else if( (double_quotes && line[i] != '"') ||
	       (left_quote && line[i] != '`')     ||
	       (right_quote && line[i] != '\'') )
      continue;
    // if we're in the middle of a quoted string, ignore anything except a
    // closing quote

    switch(line[i]) {
    case '\\':
      escaped = 1;
      break;
    case '(':
      parens++;
      break;
    case ')':
      // if there are too many closing parens, fail
      if(--parens < 0)
	return 0;
      break;
    case '"':
      double_quotes = !double_quotes;
      break;
    case '`':
      left_quote = !left_quote;
      break;
    case '\'':
      right_quote = !right_quote;
      break;
    }
  }
  // if there are unmatched quotes or parens, fail
  if(double_quotes || left_quote || right_quote || parens) return 0;

  return 1;
}

string*
get_words(string line)
{
  int double_quotes, left_quote, right_quote, space, escaped;
  string* words = ({});
  int idx;

  for(int i = 0; i < sizeof(line); i++) {
    if(escaped) {
      escaped = 0;
      continue;
    } else if( (double_quotes && line[i] != '"') ||
	       (left_quote && line[i] != '`')     ||
	       (right_quote && line[i] != '\'') )
      continue;
    // if we're in the middle of a quoted string, ignore anything except a
    // closing quote

    switch(line[i]) {
    case '\\': /* Backslash */
      escaped = 1;
      break;
//    case '(':
//      break;
//    case ')':
//      break;
    case '"': /* Double Quote */
      if(!double_quotes)
	idx = i;
      else
	words += ({ line[idx..i] });
      double_quotes = !double_quotes;
      break;
    case '`': /* Left Quote */
      if(!left_quote)
	idx = i;
      else
	words += ({ line[idx..i] });
      left_quote = !left_quote;
      break;
    case '\'': /* Right Quote */
      if(!right_quote)
	idx = i;
      else
	words += ({ line[idx..i] });
      right_quote = !right_quote;
      break;
    case ' ': /* SPACE */
      if(!space)
	idx = i;
      else
	words += ({ line[idx..i] });
      space = !space;
      break;
    }
  }
  words += ({ line[idx..] });

  return words;
}
